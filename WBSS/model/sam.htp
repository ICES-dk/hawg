#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  int genpin;
  data_int  noFleets;
  data_ivector fleetTypes;
  int ssbPhase;
  int ssbPowPhase;
  data_vector fleetTimes;
  data_int  noYears;
  data_vector years;
  dvector times;
  data_int  noObs;
  data_ivector idx1;
  data_ivector idx2;
  data_matrix data;
  dvector logObs;
  int minAgeObs;
  int maxAgeObs;
  int minYearResFleet;
  int maxYearResFleet;
  data_matrix propMature;
  data_matrix stockMeanWeight;
  data_matrix catchMeanWeight;
  data_matrix natMor;
  data_matrix landFrac;
  data_matrix catchMeanWeightD;
  data_matrix catchMeanWeightL;
  data_matrix Fprop;
  data_matrix Mprop;
  data_int  minAge;
  data_int  maxAge;
  data_int  maxAgePlusGroup;
  data_imatrix keyLogFsta;
  int noLogFsta;
  data_int  corFlag;
  data_imatrix keyLogFpar;
  int noLogFpar;
  data_imatrix keyQpow;
  int noQpow;
  data_imatrix keyVarF;
  int noVarF;
  data_ivector keyVarLogN;
  int noVarLogN;
  data_imatrix keyVarObs;
  int noVarObs;
  data_int  stockRecruitmentModelCode;
  data_int  noScaledYears;
  data_ivector keyScaledYears;
  data_imatrix keyParScaledYA;
  int noScaledPar;
  int stateDim;
  data_ivector fbarRange;
  int pinini;
  data_number  varLogFstaInit;
  data_number  varLogNInit;
  data_number  varLogObsInit;
  data_number  logFparInit;
  data_number  rec_logaInit;
  data_number  rec_logbInit;
  ivector retro;
  int reducedRun;
  data_ivector tempretro;
  ivector lastYearData;
  dmatrix residuals;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  friend class df1b2_pre_parameters;
  friend class df1b2_parameters;
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
  param_init_vector logFpar;
  param_init_vector logQpow;
  param_init_bounded_vector logSdLogFsta;
  param_init_bounded_vector logSdLogN;
  param_init_bounded_vector logSdLogObs;
  param_init_number  rec_loga;
  param_init_number  rec_logb;
  param_init_bounded_number rho;
  param_init_vector logScale;
  param_init_number  logScaleSSB;
  param_init_number  logPowSSB;
  param_init_number  logSdSSB;
  param_vector scaledLogObs;
  param_matrix X;
  random_effects_vector U;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value  jnll;
  param_stddev_vector ssb;
  param_stddev_vector logssb;
  param_stddev_vector logCatch;
  param_stddev_vector fbar;
  param_stddev_vector logfbar;
  param_stddev_vector tsb;
  param_stddev_vector logtsb;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  virtual void AD_uf_inner(void){pre_userfunction();}
  virtual void AD_uf_outer(void){pre_userfunction();}
  virtual void user_function(void){;}
  virtual void allocate(void){;}
SEPFUN3 void step(const int y, const dvar_vector& u1,const dvar_vector& u2, const dvar_vector& logFpar, const dvariable& rec_loga, const dvariable& rec_logb, const dvar_vector& logSdLogN, const dvar_vector& logSdLogFsta, const dvariable& rho);
SEPFUN3 void obs(const dvar_vector& u, const dmatrix& data, const dvar_vector& obs, const dvar_vector& logFpar, const dvar_vector& logSdLogObs, const dvar_vector& logQpow, const dvariable& logScaleSSB, const dvariable& logPowSSB, const dvariable& logSdSSB);
 dvariable SSB(dvar_vector x, dvector p, dvector w, dvector fprop, dvector mprop, dvector M);
 dvariable CATCH(dvar_vector x, dvector M, dvector w);
 dvariable TSB(dvar_vector x, dvector w);
 dvariable FBAR(dvar_vector x, int from, int to);

};
  
class df1b2_pre_parameters : public model_parameters
{ 
public: 
  df1b2_pre_parameters(int sz,int argc, char * argv[]) : 
    model_parameters(sz,argc,argv){;}
  re_objective_function_value  jnll;
  void begin_df1b2_funnel(void); 
  void setup_quadprior_calcs(void); 
  void end_df1b2_funnel(void);
 void step(const int y, const funnel_init_df1b2vector& u1,const funnel_init_df1b2vector& u2, const funnel_init_df1b2vector& logFpar, const funnel_init_df1b2variable& rec_loga, const funnel_init_df1b2variable& rec_logb, const funnel_init_df1b2vector& logSdLogN, const funnel_init_df1b2vector& logSdLogFsta, const funnel_init_df1b2variable& rho);
 void obs(const funnel_init_df1b2vector& u, const dmatrix& data, const funnel_init_df1b2vector& obs, const funnel_init_df1b2vector& logFpar, const funnel_init_df1b2vector& logSdLogObs, const funnel_init_df1b2vector& logQpow, const funnel_init_df1b2variable& logScaleSSB, const funnel_init_df1b2variable& logPowSSB, const funnel_init_df1b2variable& logSdSSB);
}; 
 
class df1b2_parameters : public df1b2_pre_parameters 
{ 
public: 
  static df1b2_parameters * df1b2_parameters_ptr;
  static df1b2_parameters * get_df1b2_parameters_ptr(void) 
  { 
    return df1b2_parameters_ptr; 
  } 
  df1b2_parameters(int sz,int argc, char * argv[]) : 
    df1b2_pre_parameters(sz,argc,argv) 
  { 
    df1b2_parameters_ptr=this;
  }
  df1b2_init_vector logFpar;
  df1b2_init_vector logQpow;
  df1b2_init_bounded_vector logSdLogFsta;
  df1b2_init_bounded_vector logSdLogN;
  df1b2_init_bounded_vector logSdLogObs;
  df1b2_init_number  rec_loga;
  df1b2_init_number  rec_logb;
  df1b2_init_bounded_number rho;
  df1b2_init_vector logScale;
  df1b2_init_number  logScaleSSB;
  df1b2_init_number  logPowSSB;
  df1b2_init_number  logSdSSB;
  df1b2vector scaledLogObs;
  df1b2matrix X;
  df1b2_init_vector U;
  df1b2variable prior_function_value;
  df1b2variable likelihood_function_value;
   // re_objective_function_value  jnll;
  df1b2vector ssb;
  df1b2vector logssb;
  df1b2vector logCatch;
  df1b2vector fbar;
  df1b2vector logfbar;
  df1b2vector tsb;
  df1b2vector logtsb;
  virtual void user_function(void); 
  virtual void allocate(void); 
 // void begin_df1b2_funnel(void); 
 // void setup_quadprior_calcs(void); 
 // void end_df1b2_funnel(void);
 df1b2variable SSB(df1b2vector x, dvector p, dvector w, dvector fprop, dvector mprop, dvector M);
 df1b2variable CATCH(df1b2vector x, dvector M, dvector w);
 df1b2variable TSB(df1b2vector x, dvector w);
 df1b2variable FBAR(df1b2vector x, int from, int to);

};

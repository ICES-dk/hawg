plot.NAA(asap)
plot.recruitment.devs(asap)
plot.recr.ssb.yr(asap)
plot.SR.pred.line(asap)
plot.SARC.R.SSB(asap)
if (exists("a1")!=F)   plot.cv(asap, a1)
if(retro.flag==T) plot.retro.wrapper(asap.rts,asap)
#--- Reference Points
plot.yield.curves(asap, nyrs.ave) # plots YPR - SPR curves and prints table of values
plot.SPR.table(asap, nyrs.ave)  # prints table of SPR values
plot.exp.spawn(asap, nyrs.ave)  # calculates expected lifetime spawning under various F values
plot.annual.SPR.targets(asap)
msy <- plot.MSY.annual(asap) # returns matrix of annual MSY estimates from SR curve
#--- MCMC results (assume user only does 1 chain)
if (asap$options$do.mcmc>0)  plot.mcmc(asap, asap.name)
#--- Input Data
plot.catch.by.fleet(asap)
plot.catch.age.comp.bubbles(asap)                  # (won't appear if all input ESS=0)
plot.catch.age.comp.bubbles(asap,is.catch.flag=F)  # dicards age comp (won't appear if all input ESS=0)
plot.index.input(asap)
plot.index.age.comp.bubbles(asap)
plot.waa.matrices(asap)
plot.M(asap)
plot.maturity(asap)
write.RMSE.multipliers
#------------------------------------
#------  PDF Files  ---------------
# option to generate pdfs
if (make.one.pdf==T) {
graphics.off()
pdf(file=paste(od,asap.name,".ALL.PLOTS.pdf",sep=""), onefile=T)
save.plots=F
plot.main.likelihoods(asap)
a1<-grab.aux.files(asap.name, asap)
if (exists("a1")!=F) p1b<-plot.high.corr(a1$asap.cor.mat, correlation.limit)
if (exists("a1")!=F) npar<-a1$npar
if (exists("a1")!=F) max.grad<-a1$max.grad
#plot.additional.likelihoods(asap,seq(5,18))
plot.RMSE.table(asap)
plot.RMSE.95CI(asap)   #plot RMSE with 95% CI
plot.catch.4.panel(asap)
plot.discard.4.panel(asap)
plot.catch.age.comp(asap)     #fits to annual observed comp
plot.catch.age.comp.resids(asap)  #bubble plots
plot.catch.age.comp(asap,is.catch.flag=F) # plot discard age comp
plot.catch.age.comp.resids(asap,is.catch.flag=F) # plot discard age comp residuals
plot.fleet.Neff(asap)
plot.francis.fleet(asap,is.catch.flag=T)
plot.fleet.Neff(asap,is.catch.flag=F) # plot discard Neff
plot.francis.fleet(asap,is.catch.flag=F)
plot.indices.4panel(asap)
plot.index.age.comp.resids(asap)
plot.index.Neff(asap)
plot.francis.index(asap)
#write.RMSE.multipliers(asap)
#--- Results
plot.fleet.sel.blocks(asap)
plot.fleet.Fmult(asap)
plot.index.selectivities(asap)
# 3/19/2013 (new)
plot_catch_curves_for_catch(asap, first.age=cc.age ) # cc.age is user-defined peak age (-999 is default)
# test to ensure at least one index has age composition data
if(sum(asap$control.parms$index.age.comp.flag) > 0) plot_catch_curves_for_index(asap, first.age=cc.age)
plot_catch_at_age_consistency(asap)
# test to ensure at least one index has age composition data
if(sum(asap$control.parms$index.age.comp.flag) > 0) plot_index_at_age_consistency(asap)
# 3/19/2013 ( end new)
plot.catchability(asap, a1)
plot.SSB.F.trend(asap)
plot.all.biomass.types(asap)
plot.SSB.AA(asap)
plot.NAA(asap)
plot.recruitment.devs(asap)
plot.recr.ssb.yr(asap)
plot.SR.pred.line(asap)
plot.SARC.R.SSB(asap)
if (exists("a1")!=F)   plot.cv(asap, a1)
if(retro.flag==T) plot.retro.wrapper(asap.rts,asap)
#--- Reference Points
plot.yield.curves(asap, nyrs.ave) # plots YPR - SPR curves and prints table of values
plot.SPR.table(asap, nyrs.ave)  # prints table of SPR values
plot.exp.spawn(asap, nyrs.ave)  # calculates expected lifetime spawning under various F values
plot.annual.SPR.targets(asap)
msy <- plot.MSY.annual(asap) # returns matrix of annual MSY estimates from SR curve
#--- MCMC results (assume user only does 1 chain)
if (asap$options$do.mcmc>0)   plot.mcmc(asap, asap.name)
#--- Input Data
plot.catch.by.fleet(asap)
plot.catch.age.comp.bubbles(asap)                  # (won't appear if all input ESS=0)
plot.catch.age.comp.bubbles(asap,is.catch.flag=F)  # dicards age comp (won't appear if all input ESS=0)
plot.index.input(asap)
plot.index.age.comp.bubbles(asap)
plot.waa.matrices(asap)
plot.M(asap)
plot.maturity(asap)
dev.off()
graphics.off()
}  # end make.one.pdf
#--------------------------------------------------
#--------Now make individual pdfs------------------
#_________DIAGNOSTIC PLOTS___________________
graphics.off()
pdf(file=paste(od,asap.name,".DIAGNOSTIC.PLOTS.pdf",sep=""), onefile=T)
save.plots=F
plot.main.likelihoods(asap)
a1<-grab.aux.files(asap.name, asap)
if (exists("a1")!=F) p1b<-plot.high.corr(a1$asap.cor.mat, correlation.limit)
if (exists("a1")!=F) npar<-a1$npar
if (exists("a1")!=F) max.grad<-a1$max.grad
#plot.additional.likelihoods(asap,seq(5,18))
plot.RMSE.table(asap)
plot.RMSE.95CI(asap)   #plot RMSE with 95% CI
plot.catch.4.panel(asap)
plot.discard.4.panel(asap)
plot.catch.age.comp(asap)     #fits to annual observed comp
plot.catch.age.comp.resids(asap)  #bubble plots
plot.catch.age.comp(asap,is.catch.flag=F) # plot discard age comp
plot.catch.age.comp.resids(asap,is.catch.flag=F) # plot discard age comp residuals
plot.fleet.Neff(asap)
plot.francis.fleet(asap,is.catch.flag=T)
plot.fleet.Neff(asap,is.catch.flag=F) # plot discard Neff
plot.francis.fleet(asap,is.catch.flag=F)
plot.indices.4panel(asap)
plot.index.age.comp.resids(asap)
plot.index.Neff(asap)
plot.francis.index(asap)
dev.off()
graphics.off()
#_________RESULTS___________________
graphics.off()
windows()
pdf(file=paste(od,asap.name,".RESULTS.PLOTS.pdf",sep=""), onefile=T)
plot.fleet.sel.blocks(asap)
plot.fleet.Fmult(asap)
plot.index.selectivities(asap)
# 3/19/2013 (new)
plot_catch_curves_for_catch(asap, first.age=cc.age ) # cc.age is user-defined peak age (-999 is default)
# test to ensure at least one index has age composition data
if(sum(asap$control.parms$index.age.comp.flag) > 0) plot_catch_curves_for_index(asap, first.age=cc.age)
plot_catch_at_age_consistency(asap)
# test to ensure at least one index has age composition data
if(sum(asap$control.parms$index.age.comp.flag) > 0) plot_index_at_age_consistency(asap)
# 3/19/2013 ( end new)
plot.catchability(asap, a1)
plot.SSB.F.trend(asap)
plot.all.biomass.types(asap)
plot.SSB.AA(asap)
plot.NAA(asap)
plot.recruitment.devs(asap)
plot.recr.ssb.yr(asap)
plot.SR.pred.line(asap)
plot.SARC.R.SSB(asap)
if (exists("a1")!=F)   plot.cv(asap, a1)
if(retro.flag==T) plot.retro.wrapper(asap.rts,asap)
dev.off()
graphics.off()
#_________  MCMC   ___________________
if (asap$options$do.mcmc>0) {
graphics.off()
windows()
pdf(file=paste(od,asap.name,".MCMC.PLOTS.pdf",sep=""), onefile=T)
plot.mcmc(asap, asap.name)
dev.off()
graphics.off()
}
#_________REFERENCE POINTS___________________
graphics.off()
windows()
pdf(file=paste(od,asap.name,".REF.POINTS.PLOTS.pdf",sep=""), onefile=T )
plot.yield.curves(asap, nyrs.ave) # plots YPR - SPR curves and prints table of values
plot.SPR.table(asap, nyrs.ave)  # prints table of SPR values
plot.exp.spawn(asap, nyrs.ave)  # calculates expected lifetime spawning under various F values
plot.annual.SPR.targets(asap)
msy <- plot.MSY.annual(asap) # returns matrix of annual MSY estimates from SR curve
dev.off()
graphics.off()
#_________INPUTS___________________
graphics.off()
windows()
pdf(file=paste(od,asap.name,".DATA.PLOTS.pdf",sep=""), onefile=T)
plot.catch.by.fleet(asap)
plot.catch.age.comp.bubbles(asap)                #   (won't appear if all input ESS=0)
plot.catch.age.comp.bubbles(asap,is.catch.flag=F)  # dicards age comp (won't appear if all input ESS=0)
plot.index.input(asap)
plot.index.age.comp.bubbles(asap)
plot.waa.matrices(asap)
plot.M(asap)
plot.maturity(asap)
dev.off()
graphics.off()
library(lattice)
# number of runs
n <- 6
run<-"2017 ASSESSMENT FINAL_RETRO"
runs <- paste(run,'_',sprintf("%03d",0:(n-1)),sep='')
# first age
firstage <- 1
#dir1<-("W:/PERSONAL/Afra/HAWG 2015/Celtic Sea/Final 2015 new nat mor/")
#dir2<-("W:/PERSONAL/Afra/HAWG 2015/Celtic Sea/Final 2015 new nat mor/more plots")
#dir1<-("L:/PERSONAL/Afra/ASAP/2017 HAWG/")
#dir2<-("L:/PERSONAL/Afra/ASAP/2017 HAWG/more plots")
dir1<-("C:/Users/momalley/Desktop/HAWG 2017/2017 HAWG FINAL/")
dir2<-("C:/Users/momalley/Desktop/HAWG 2017/2017 HAWG FINAL/more plots")
if(length(list.dirs(dir2))==0) dir.create(dir2)
setwd(dir2)
# if you dont specify discards separately, you will have to give the landings here
landhack <- TRUE
landings<-data.frame(1958:2016,c(22978,15086,18283,15372,21552,17349,10599,19126,27030,
27658,30236,44389,31727,31396,38203,26936,19940,15588,9771,7833,7559,10321,13130,17103,
13000,24981,26779,20426,25024,26200,20447,2325,18404,25562,21127,18618,19300,23305,18816,
20496,18041,18485,17191,15269,7465,11536,12743,9494,6944,7636,5872,5745,8370,11470,21820,
16247,19574,18355,16136))
# end user input
n <- length(runs)
REPfile <- NULL
REP <- NULL
DATfile <- NULL
DAT <- NULL
nyears <- NULL
years <- NULL
for(i in 1:n) {
REPfile[[i]] <- paste(dir1,runs[i],'.REP',sep='')
REP[[i]] <- readLines(REPfile[[i]])
DATfile[[i]] <- paste(dir1,runs[i],'.DAT',sep='')
DAT[[i]] <- readLines(DATfile[[i]])
j <- which(DAT[[i]]=='# Number of Years')
nyears[[i]] <- read.table(DATfile[[i]],header=F,skip=j,nrows=1)[,]
j <- which(DAT[[i]]=='# First Year')
year1 <- read.table(DATfile[[i]],header=F,skip=j,nrows=1)[,]
years[[i]] <- year1:(year1+nyears[[i]]-1)
}
lan <- NULL
dis <- NULL
catch <- NULL
ssb<- NULL
fbar <- NULL
recr <- NULL
for(j in 1:n) {
i <- which(REP[[j]]==' fleet 1 total catches')
lan[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]])[,2]
i <- which(REP[[j]]==' fleet 1 total Discards')
dis[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]])[,3]
catch[[j]] <- dis[[j]]+lan[[j]]
i <- which(REP[[j]]=='Spawning Stock, Obs Recruits(year+1), Pred Recruits(year+1), standardized residual')
ssb[[j]] <- read.table(REPfile[[j]],header=F,skip=i+1,nrows=nyears[[j]],fill=T)[,2]
recr[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]],fill=T)[,3]
i <- which(REP[[j]]=='year    unweighted   Nweighted    Bweighted')
fbar[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]])[,2]
}
windows()
par(mfrow=c(2,2))
ylim <- c(0,max(unlist(catch)))
for(j in 1:n) {
if(j==1)   plot(catch[[j]]~years[[j]],ylim=ylim,type='l',xlab='Year',ylab='Tonnes',main='Catch')
lines(catch[[j]]~years[[j]])
lines(lan[[j]]~years[[j]],lty=3)
}
#  if(landhack) lines(landings,lty=3)
#  legend('topleft',c('landings'),lty=c(1,3),inset=0.02)
ylim <- c(0,max(unlist(ssb)))
for(j in 1:n) {
if(j==1) plot(ssb[[j]]~years[[j]],ylim=ylim,type='n',xlab='Year',ylab='Tonnes',main='Spawning Stock Biomass')
lines(ssb[[j]]~years[[j]])
}
ylim <- c(0,max(unlist(fbar)))
for(j in 1:n) {
if(j==1) plot(fbar[[j]]~years[[j]],ylim=ylim,type='n',xlab='Year',ylab='F',main='Fbar 2-5')
lines(fbar[[j]]~years[[j]])
}
ylim <- c(0,max(unlist(recr)/1000))
for(j in 1:n) {
if(j==1) plot(recr[[j]]/1000~years[[j]],ylim=ylim,type='n',xlab='Year',ylab='Millions',main='Recruits age 1')
lines(recr[[j]]/1000~years[[j]])
}
savePlot('Retrospective.png','png')
dev.off()
### This may be used in an extended STF
library(lattice)
# user input
# number of runs
n <- 6
run<-"2017 ASSESSMENT FINAL_RETRO"
runs <- paste(run,'_',sprintf("%03d",0:(n-1)),sep='')
# first age
firstage <- 1
#dir1<-("W:/PERSONAL/Afra/HAWG 2015/Celtic Sea/Final 2015 new nat mor/")
#dir1<-("L:/PERSONAL/Afra/ASAP/2017 HAWG/")
dir1<-("C:/Users/momalley/Desktop/HAWG 2017/2017 HAWG FINAL/")
n <- length(runs)
REPfile <- NULL
REP <- NULL
DATfile <- NULL
DAT <- NULL
nyears <- NULL
years <- NULL
for(i in 1:n) {
REPfile[[i]] <- paste(dir1,runs[i],'.REP',sep='')
REP[[i]] <- readLines(REPfile[[i]])
DATfile[[i]] <- paste(dir1,runs[i],'.DAT',sep='')
DAT[[i]] <- readLines(DATfile[[i]])
j <- which(DAT[[i]]=='# Number of Years')
nyears[[i]] <- read.table(DATfile[[i]],header=F,skip=j,nrows=1)[,]
j <- which(DAT[[i]]=='# First Year')
year1 <- read.table(DATfile[[i]],header=F,skip=j,nrows=1)[,]
years[[i]] <- year1:(year1+nyears[[i]]-1)
}
#### Loop to extract the Fs and Ns for each retro run
TotalF <- NULL
Numbers <- NULL
for(j in 1:n) {
i <- which(REP[[j]]=='Total F')
TotalF[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]])
i <- which(REP[[j]]=='Population Numbers at the Start of the Year')
Numbers[[j]] <- read.table(REPfile[[j]],header=F,skip=i,nrows=nyears[[j]])
}
### Wite out the Fs and Ns from each retro run in an individual csv file
retro_2016_N<-data.frame(Numbers[1])
retro_2015_N<-data.frame(Numbers[2])
retro_2014_N<-data.frame(Numbers[3])
retro_2013_N<-data.frame(Numbers[4])
retro_2012_N<-data.frame(Numbers[5])
retro_2011_N<-data.frame(Numbers[6])
ages<-1:9
colnames(retro_2016_N) <- paste('Age',ages)
colnames(retro_2015_N) <- paste('Age',ages)
colnames(retro_2014_N) <- paste('Age',ages)
colnames(retro_2013_N) <- paste('Age',ages)
colnames(retro_2012_N) <- paste('Age',ages)
colnames(retro_2011_N) <- paste('Age',ages)
write.csv(retro_2016_N,file=paste("retro_2016_N.csv",sep=""),row.names=F)
write.csv(retro_2015_N,file=paste("retro_2015_N.csv",sep=""),row.names=F)
write.csv(retro_2014_N,file=paste("retro_2014_N.csv",sep=""),row.names=F)
write.csv(retro_2013_N,file=paste("retro_2013_N.csv",sep=""),row.names=F)
write.csv(retro_2012_N,file=paste("retro_2012_N.csv",sep=""),row.names=F)
write.csv(retro_2011_N,file=paste("retro_2011_N.csv",sep=""),row.names=F)
retro_2016_F<-data.frame(TotalF[1])
retro_2015_F<-data.frame(TotalF[2])
retro_2014_F<-data.frame(TotalF[3])
retro_2013_F<-data.frame(TotalF[4])
retro_2012_F<-data.frame(TotalF[5])
retro_2011_F<-data.frame(TotalF[6])
ages<-1:9
colnames(retro_2016_F) <- paste('Age',ages)
colnames(retro_2015_F) <- paste('Age',ages)
colnames(retro_2014_F) <- paste('Age',ages)
colnames(retro_2013_F) <- paste('Age',ages)
colnames(retro_2012_F) <- paste('Age',ages)
colnames(retro_2011_F) <- paste('Age',ages)
write.csv(retro_2016_F,file=paste("retro_2016_F.csv",sep=""),row.names=F)
write.csv(retro_2015_F,file=paste("retro_2015_F.csv",sep=""),row.names=F)
write.csv(retro_2014_F,file=paste("retro_2014_F.csv",sep=""),row.names=F)
write.csv(retro_2013_F,file=paste("retro_2013_F.csv",sep=""),row.names=F)
write.csv(retro_2012_F,file=paste("retro_2012_F.csv",sep=""),row.names=F)
write.csv(retro_2011_F,file=paste("retro_2011_F.csv",sep=""),row.names=F)
setwd("C:/Users/Desktop/HAWG 2017/2017 HAWG FINAL/Julios/WG2017")
rm(list=ls())
source("funcs.r")
setwd("C:/Users/Desktop/HAWG 2017/2017 HAWG FINAL/Julios/WG2017")
setwd("C:/Users/momalley/Desktop/HAWG 2017/2017 HAWG FINAL/Julios/WG2017")
rm(list=ls())
source("funcs.r")
layout(matrix(c(1,2,3,4,5,6,7,8,9), 3, 3, byrow = TRUE))
#request SR data file
#file should contain columns named year, R and SSB
SRdatafile <- winDialogString("SR Data File?","sr.data.txt")
#output filename?
outfile <- winDialogString("Output data file?",paste(SRdatafile,".out",sep=""))
sink(outfile)
RecAge <- winDialogString("Recruitment Age?","0")
#read in the data
sr.data <- read.table(SRdatafile, header=T)
if (as.integer(RecAge)>0) {
for (j in 1:as.integer(RecAge)) {
#shift the recruitment vector
for (i in 1:(length(sr.data$R)-1)) {
sr.data$R[i]<-sr.data$R[i+1]
}
}
Recr<-sr.data$R[1:(length(sr.data$R)-as.integer(RecAge))]
SSB<-sr.data$SSB[1:(length(sr.data$SSB)-as.integer(RecAge))]
Year<-sr.data$year[1:(length(sr.data$year)-as.integer(RecAge))]
if (as.integer(RecAge)>0) {
for (j in 1:as.integer(RecAge)) {
#shift the recruitment vector
for (i in 1:(length(sr.data$R)-1)) {
sr.data$R[i]<-sr.data$R[i+1]
}
}
Recr<-sr.data$R[1:(length(sr.data$R)-as.integer(RecAge))]
SSB<-sr.data$SSB[1:(length(sr.data$SSB)-as.integer(RecAge))]
Year<-sr.data$year[1:(length(sr.data$year)-as.integer(RecAge))]
} else {
Recr<-sr.data$R
SSB<-sr.data$SSB
Year<-sr.data$year
}
plot(SSB,
Recr,
col=4,
xlab="SSB",
ylab="Recruitment",
xlim=c(0,max(SSB)),
ylim=c(0,max(Recr)))
jul.mod <- slm2.sr(SSB,Recr)
print("*****jul.mod*****")
print(jul.mod)
jul.mod <- changepoint.sr(SSB, Recr, delta=jul.mod$delta, constrained=T)
gs.mod <- slm.sr(SSB, Recr, grid=500)
print("*****gs.mod*****")
print(gs.mod)
gs.mod <- changepoint.sr(SSB, Recr, delta=gs.mod$delta, constrained=T)
plot(SSB, Recr, type="n", xlab="SSB", ylab="Recruitment",main="Stock Recruit Relationship", xlim=c(0,max(SSB)), ylim=c(0,max(Recr)),cex.axis=0.8)
text(SSB, Recr, Year, cex=0.5)
lines( c(0,jul.mod$delta), c(0, jul.mod$beta1*jul.mod$delta), lty=1)
lines( c(jul.mod$delta, max(SSB)), c(jul.mod$alpha2, jul.mod$alpha2), lty=1)
abline(v=jul.mod$delta, col=2, lty=2)
qqnorm(jul.mod$res)
qqline(jul.mod$res)
hist(jul.mod$res, nclass=10)
n <- length(Year)
jul.mod00a<-slm2.sr(SSB[1:c(n-0)],Recr[1:c(n-0)])
jul.mod01a<-slm2.sr(SSB[1:c(n-1)],Recr[1:c(n-1)])
jul.mod02a<-slm2.sr(SSB[1:c(n-2)],Recr[1:c(n-2)])
jul.mod03a<-slm2.sr(SSB[1:c(n-3)],Recr[1:c(n-3)])
jul.mod04a<-slm2.sr(SSB[1:c(n-4)],Recr[1:c(n-4)])
jul.mod05a<-slm2.sr(SSB[1:c(n-5)],Recr[1:c(n-5)])
jul.mod06a<-slm2.sr(SSB[1:c(n-6)],Recr[1:c(n-6)])
jul.mod07a<-slm2.sr(SSB[1:c(n-7)],Recr[1:c(n-7)])
jul.mod08a<-slm2.sr(SSB[1:c(n-8)],Recr[1:c(n-8)])
jul.mod09a<-slm2.sr(SSB[1:c(n-9)],Recr[1:c(n-9)])
jul.mod10a<-slm2.sr(SSB[1:c(n-10)],Recr[1:c(n-10)])
delta.a <- c(jul.mod00a$delta,jul.mod01a$delta,jul.mod02a$delta,jul.mod03a$delta,
jul.mod04a$delta,jul.mod05a$delta,jul.mod06a$delta,jul.mod07a$delta,
jul.mod08a$delta,jul.mod09a$delta,jul.mod10a$delta)
print("*****delta.a*****")
print(delta.a)
yr <- seq(max(Year)-10,max(Year))
plot(yr, delta.a, type="l", ylim=c(0, c(round(max(delta.a)/1000)*1500)))
plot(SSB,
Recr,
type="n",
xlab="SSB",
ylab="Recruitment",
xlim=c(0,max(SSB)),
ylim=c(0,max(Recr)))
text(SSB,Recr,Year,cex=0.5)
lines(c(0,jul.mod$delta),c(0,jul.mod$beta1*jul.mod$delta),col="dark red",lwd=2,lty=1)
lines(c(jul.mod$delta, max(SSB)), c(jul.mod$alpha2, jul.mod$alpha2), col="dark red", lwd=2, lty=1)
abline(v=jul.mod$delta, col=2, lty=2)
lines( c(1, jul.mod01a$delta), c(0, jul.mod01a$beta1*jul.mod01a$delta), lty=2)
lines( c(jul.mod01a$delta, max(SSB)), c(jul.mod01a$alpha2, jul.mod01a$alpha2), lty=2)
lines( c(0, jul.mod02a$delta), c(0, jul.mod02a$beta1*jul.mod02a$delta), lty=2)
lines( c(jul.mod02a$delta, max(SSB)), c(jul.mod02a$alpha2, jul.mod02a$alpha2), lty=2)
lines( c(0, jul.mod03a$delta), c(0, jul.mod03a$beta1*jul.mod03a$delta), lty=2)
lines( c(jul.mod03a$delta, max(SSB)), c(jul.mod03a$alpha2, jul.mod03a$alpha2), lty=2)
lines( c(0, jul.mod04a$delta), c(0, jul.mod04a$beta1*jul.mod04a$delta), lty=2)
lines( c(jul.mod04a$delta, max(SSB)), c(jul.mod04a$alpha2, jul.mod04a$alpha2), lty=2)
lines( c(0, jul.mod05a$delta), c(0, jul.mod05a$beta1*jul.mod05a$delta), lty=2)
lines( c(jul.mod05a$delta, max(SSB)), c(jul.mod05a$alpha2, jul.mod05a$alpha2), lty=2)
lines( c(0, jul.mod06a$delta), c(0, jul.mod06a$beta1*jul.mod06a$delta), lty=2)
lines( c(jul.mod06a$delta, max(SSB)), c(jul.mod06a$alpha2, jul.mod06a$alpha2), lty=2)
lines( c(0, jul.mod07a$delta), c(0, jul.mod07a$beta1*jul.mod07a$delta), lty=2)
lines( c(jul.mod07a$delta, max(SSB)), c(jul.mod07a$alpha2, jul.mod07a$alpha2), lty=2)
lines( c(0, jul.mod08a$delta), c(0, jul.mod08a$beta1*jul.mod08a$delta), lty=2)
lines( c(jul.mod08a$delta, max(SSB)), c(jul.mod08a$alpha2, jul.mod08a$alpha2), lty=2)
lines( c(0, jul.mod09a$delta), c(0, jul.mod09a$beta1*jul.mod09a$delta), lty=2)
lines( c(jul.mod09a$delta, max(SSB)), c(jul.mod09a$alpha2, jul.mod09a$alpha2), lty=2)
lines( c(0, jul.mod10a$delta), c(0, jul.mod10a$beta1*jul.mod10a$delta), lty=2)
lines( c(jul.mod10a$delta, max(SSB)), c(jul.mod10a$alpha2, jul.mod10a$alpha2), lty=2)
deltas<-c()
for (i in 1:length(Year)) {
jul.mod<-slm2.sr(SSB[-i],Recr[-i])
deltas<-c(deltas,jul.mod$delta)
}
print("*****deltas*****")
print(deltas)
plot(Year, deltas, type="l",  ylim=c(0, c(round(max(deltas)/1000)*1500)))
mean.mod <- lm(log(Recr)~1)
mean.ssq <- sum(residuals(mean.mod)^2)
print("*****Summary(mean.mod)*****")
print(summary(mean.mod))
print("*****mean.ssq*****")
print(mean.ssq)
line.mod <- lm(log(Recr)~1, offset=log(SSB))
line.ssq <- sum(residuals(line.mod)^2)
print("*****summary(line.mod)*****")
print(summary(line.mod))
print("*****line.ssq*****")
print(line.ssq)
f.obs <- (mean.ssq - jul.mod$ssq)*(n-2)/jul.mod$ssq
print("*****f.obs*****")
print(f.obs)
date()
f <- boot.sr(SSB, Recr, iter=1000)
date()
plot(ecdf(f$f.all), verticals=T, do.p=F, xlab="F statistic", main="Empirical distribution")
abline(v=f$f.obs, lty=2, col=2)
print("*****f*****")
print(f)
sink()
jpeg(file="JuliosFitSR.jpg",height=500,width=800)
layout(matrix(c(1), 1, 1, byrow = TRUE))
plot(SSB/1000, Recr/1e3, col=4, xlab="SSB (kt)", ylab="Recruitment (Millions)",
xlim=c(0,175), ylim=c(0,max(Recr/1e3)),pch=19,bty="n",axes=F)
text(SSB/1000,Recr/1e3,Year,cex=0.75,pos=3)
lines(c(0,(537900/1e3)/9.462927,max(SSB/1000)),c(0,537900/1e3,537900/1e3))
lines(c((537900/1e3)/9.462927,(537900/1e3)/9.462927),c(0,537900/1e3),lty=2)
axis(side=1,at=c(0,25,50,75,100,125,150,175))
axis(side=2,at=c(0,250,500,750,1000,1250,1500))
dev.off()
dev.off()
setwd("C:/Users/momalley/Desktop/HAWG 2017/2017 HAWG FINAL/Julios/WG2017")

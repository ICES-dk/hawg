#summary HOWTO: Use the HAWG Repository
=HOWTO: Use the HAWG Repository=

== Getting the Code ==

A nice introduction on how to download code from the repository using TortoiseSVN has been written by the [http://code.google.com/p/mseflr/ mseflr] people and is available from http://code.google.com/p/mseflr/wiki/UsingTortoiseSVN. 

The "trunk" URL for this project is http://hawg.googlecode.com/svn/trunk/ - this contains the most recent version. If you intend to work on the files, you should "checkout" from this directory - otherwise, if you're just curious, you should "export" from this directory(right-click on a folder, and select TortoiseSVN/Export). The difference is relatively minor however, and you can't do too much damage by choosing the wrong option.

If you would like to download snap-shot versions of the assessment to run yourself (e.g. from HAWG 2009), use http://hawg.googlecode.com/svn/tags/ as the URL instead. If you would like to get everything, including both the most recent version (the "trunk") and all snap-shots,  use http://hawg.googlecode.com/svn/.

Finally, there is a wee trap for beginners when logging in for the first time - make sure that you use the password for the project that googlecode supplies you - not your login password to google itself! This is detailed on in the [http://code.google.com/p/mseflr/wiki/UsingTortoiseSVN mseflr] page under "Project member checkout".


== Directory Structure ==
The repository consists of a set of seven folders, where each directory corresponds to a single stock. The stock folders, in turn, each have the following directory structure
 * *./Stock/config*   Assessment configuration options
 * *./Stock/data* 	 Input data (in Lowestoft VPA format) used by the stock assessments
 * *./Stock/results*  Output data (graphs, tables) produced by the stock assessment. Not stored in repository
In addition, the "`_`Common" folder contains all of the shared modules, including the appropriate R packages
 * *./`_`Common*       Source folder for common code module and associated scripts
 * *./`_`Common/Pkgs*	Source folder for appropriate R packages
The script "UpdatePackages.r" in the ./`_`Common/Pkgs folder can be used to bring all of the required packages up to date systematically.

== Useage concept ==

The file "./`_`Common/HAWG Common assessment module.r" provides a common and standardised set of code for generating the outputs for a "standard" HAWG stock assessment. To take advantage of this code, the user should first source the module into their code eg 
{{{
source(file.path("..","_Common","HAWG Common assessment module.r"))
}}}

This script has two roles: it checks that the user has the correct versions of the required packages installed, and it then provides the user with access to the common functions, detailed below. It also takes care of sourcing other pieces of code, if needed. The user can then proceed with their stock assessment in the normal manner, and, when appropriate, call these functions to produce the standard set of graphs of tables. The user is then free to continue after this point, and perform extra analysises, including short term forecasts and the like. 

For an example of this in action, see "WBSS Assessment.r"

== Working Directory ==
All code is designed to be run with the ./Stock/ directory as the working directory. Changes from this will cause code to break - I wish there was a nice way around this, but there isn't really, unfortunately. All paths should be setup relative to this directory.

== Functions==

*do.summary.plots(_stck,ica.obj_)*
	* _stck_ (FLStock) Contains the information about the stock eg m, catch numbers etc
	* _ica.obj_ (FLICA) Output of an FLICA stock assessment
	Generates the a basic set of summary plots and diagnostic figures.

*do.retrospective.plots(_stck,idxs,ctrl,n.retro.yrs_)*
	* _stck_ (FLStock) Contains the information about the stock eg m, catch numbers etc
	* _idxs_ (FLIndices) Contains the tuning indices
	* _ctrl_ (FLICA.control) Contains the FLICA assessment setting parameters
	* _n.retro.yrs_ (integer) Number of years for which to perform the retrospective analysis
	Performs a classic retrospective analysis using the supplied objects and sends the results to retro.plots() for plotting.

*retro.plots(_stcks,icas,ctrl_)*
	* _stcks_ (FLStocks)	Contains the results of the retrospective assessments
	* _icas_ (list of FLICA objects) A list of FLICA objects from the retrospective assessments
	* _ctrl_ (FLICA.control) The control object containing the parameters used in the retrospective assessments
	Plots the results of a retrospective analysis, showing retrospective results of SSB, Fbar and Recruits, the perception of individual cohorts, and the retrospective selectivity pattern.
    
*do.SRR.plot(_stck_)*
	* _stck_ (FLStock) Result of an assessment, containing stock.n etc
	Plots a basic stock-recrutiment relationship by joing the dots for sequential years, and labelling each point with the corresponding year. Note that this function does not properly for autumn spawning stocks.

*ref.pts(_stck,model,factor_)*
	* _stck_ (FLStock) Contains the information about the stock eg m, catch numbers etc
	* _model_ (character) SR-model you want to use
	* _factor_ (integer) transformation value to reduce size of stock numbers to be able to fit SR
	Plots the yield-recruit curves including reference points, and fits a SR-model

	
==Output Figures==

The common assessment module does not specify the type of output format - this is left 
up to the user to decide. If no device is configured, all of the graphs will be displayed
in the graphics window. If the user wishes to save the graphs, eg to windows metafiles, png or PDF, they should configure the output device before sourcing the common module, and close it afterwards. eg

{{{
png("figures - %02d.png",units = "px", pointsize = 10, bg = "white")
#<Plotting scripts>
dev.off()
}}}